// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

generator kysely {
  provider = "prisma-kysely"
  output   = "../src/types"
  fileName = "database.types.ts"
  // enumFileName = "enums.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// A group represents a class or its sub-unit in educational context
model ClassGroup {
  id                 Int           @id @default(autoincrement())
  name               String
  description        String?
  banner             String?
  joinCode           String        @unique @default(uuid())
  isAcceptingMembers Boolean       @default(true)
  groupMembers       GroupMember[]
  meetings           Meeting[]
  messages           Message[]
}

/// The role of the user in the group(class)
enum Role {
  OWNER
  ADMIN
  MEMBER
}

/// A user can be a member of multiple groups and can have different roles in each group
model GroupMember {
  id      Int        @id @default(autoincrement())
  group   ClassGroup @relation(fields: [groupId], references: [id])
  groupId Int
  role    Role       @default(MEMBER)
  user    User       @relation(fields: [userId], references: [id])
  userId  Int
}

model User {
  id           Int                            @id @default(autoincrement())
  email        String                         @unique
  name         String?
  avatarUrl    String?
  groupsJoined GroupMember[]
  attendance   AttendanceReportUserPresence[]
  messagesSent Message[]
}

/// A meeting or a class can be online or offline
model Meeting {
  id               Int                @id @default(autoincrement())
  group            ClassGroup         @relation(fields: [groupId], references: [id])
  groupId          Int
  date             DateTime
  isOnline         Boolean            @default(false)
  meetCode         String?
  meetLink         String?
  startTime        DateTime?
  endTime          DateTime?
  venue            String?
  agenda           String?
  attendanceReport AttendanceReport[]
  notes            MeetingNotes[]
}

model AttendanceReport {
  id              Int                            @id @default(autoincrement())
  meeting         Meeting                        @relation(fields: [meetingId], references: [id])
  meetingId       Int
  isPublic        Boolean                        @default(false)
  membersPresence AttendanceReportUserPresence[]
}

model AttendanceReportUserPresence {
  id                 Int              @id @default(autoincrement())
  attendanceReport   AttendanceReport @relation(fields: [attendanceReportId], references: [id])
  attendanceReportId Int
  user               User             @relation(fields: [userId], references: [id])
  userId             Int
  isPresent          Boolean          @default(false)
  joinTime           DateTime
  leaveTime          DateTime
  comments           String?
  meetingTrail       Json?
}

model MeetingNotes {
  id        Int      @id @default(autoincrement())
  date      DateTime
  notes     Json
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
  meetingId Int
}

model Message {
  id      Int        @id @default(autoincrement())
  date    DateTime   @default(now())
  message String
  group   ClassGroup @relation(fields: [groupId], references: [id])
  groupId Int
  user    User       @relation(fields: [userId], references: [id])
  userId  Int
}
